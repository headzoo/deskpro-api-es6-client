/**
 * DeskPRO API
 * DeskPRO API
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../Model/Error';
import Response from '../Model/Response';

/**
* Content service.
* @module DeskPRO\API/Client/ContentApi
* @version 2.0.0
*/
export default class ContentApi {

    /**
    * Constructs a new ContentApi. 
    * @alias module:DeskPRO\API/Client/ContentApi
    * @class
    * @param {module:DeskPRO\API/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:DeskPRO\API/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteArticleById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~deleteArticleByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~deleteArticleByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    deleteArticleById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteArticleById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/articles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteArticleCategoryById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~deleteArticleCategoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~deleteArticleCategoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    deleteArticleCategoryById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteArticleCategoryById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/article_categories/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteArticleCommentById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~deleteArticleCommentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~deleteArticleCommentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    deleteArticleCommentById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteArticleCommentById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/article_comments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteArticlePendingCreateById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~deleteArticlePendingCreateByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~deleteArticlePendingCreateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    deleteArticlePendingCreateById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteArticlePendingCreateById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/article_pending_creates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDownloadById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~deleteDownloadByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~deleteDownloadByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    deleteDownloadById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDownloadById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/downloads/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDownloadCategoryById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~deleteDownloadCategoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~deleteDownloadCategoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    deleteDownloadCategoryById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDownloadCategoryById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/download_categories/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDownloadCommentById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~deleteDownloadCommentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~deleteDownloadCommentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    deleteDownloadCommentById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDownloadCommentById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/download_comments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGuideById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~deleteGuideByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~deleteGuideByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    deleteGuideById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteGuideById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/guides/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNewsById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~deleteNewsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~deleteNewsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    deleteNewsById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNewsById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/news/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNewsCategoryById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~deleteNewsCategoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~deleteNewsCategoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    deleteNewsCategoryById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNewsCategoryById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/news_categories/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNewsCommentById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~deleteNewsCommentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~deleteNewsCommentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    deleteNewsCommentById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNewsCommentById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/news_comments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTopicById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~deleteTopicByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~deleteTopicByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    deleteTopicById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTopicById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/topics/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticleById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getArticleByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~getArticleByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getArticleById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getArticleById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/articles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticleCategories operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getArticleCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection of resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page to display
     * @param {Number} opts.count Resource per page count
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.ids Comma separated list of IDs
     * @param {module:DeskPRO\API/Client/ContentApi~getArticleCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getArticleCategories(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'limit': opts['limit'],
        'ids': opts['ids']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/article_categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticleCategoryById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getArticleCategoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~getArticleCategoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getArticleCategoryById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getArticleCategoryById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/article_categories/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticleCategoryCount operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getArticleCategoryCountCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count list
     * @param {module:DeskPRO\API/Client/ContentApi~getArticleCategoryCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getArticleCategoryCount(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/article_categories/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticleCommentById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getArticleCommentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~getArticleCommentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getArticleCommentById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getArticleCommentById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/article_comments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticleCommentCount operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getArticleCommentCountCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count list
     * @param {Object} opts Optional parameters
     * @param {String} opts.status filter by status
     * @param {Number} opts.isReviewed filter by reviewed status
     * @param {String} opts.periodCreated filter by period
     * @param {Number} opts.article select comments for article with given id
     * @param {Number} opts.download select comments for download with given id
     * @param {Number} opts.news select comments for news with given id
     * @param {String} opts.groupBy how to groups comments
     * @param {module:DeskPRO\API/Client/ContentApi~getArticleCommentCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getArticleCommentCount(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'is_reviewed': opts['isReviewed'],
        'period_created': opts['periodCreated'],
        'article': opts['article'],
        'download': opts['download'],
        'news': opts['news'],
        'group_by': opts['groupBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/article_comments/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticleComments operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getArticleCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection of resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page to display
     * @param {Number} opts.count Resource per page count
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.ids Comma separated list of IDs
     * @param {String} opts.status filter by status
     * @param {Number} opts.isReviewed filter by reviewed status
     * @param {String} opts.periodCreated filter by period
     * @param {Number} opts.article select comments for article with given id
     * @param {Number} opts.download select comments for download with given id
     * @param {Number} opts.news select comments for news with given id
     * @param {String} opts.orderBy how to order comments
     * @param {module:DeskPRO\API/Client/ContentApi~getArticleCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getArticleComments(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'limit': opts['limit'],
        'ids': opts['ids'],
        'status': opts['status'],
        'is_reviewed': opts['isReviewed'],
        'period_created': opts['periodCreated'],
        'article': opts['article'],
        'download': opts['download'],
        'news': opts['news'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/article_comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticleCount operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getArticleCountCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count list
     * @param {Object} opts Optional parameters
     * @param {String} opts.author filter by author, provide an id or &#39;me&#39; for current user
     * @param {Number} opts.category filter category, could be an array or just digit
     * @param {String} opts.groupBy how to group counters
     * @param {String} opts.status filter by status
     * @param {Number} opts.hiddenStatus select for article with given id
     * @param {Number} opts.periodCreated filter by period when content was created
     * @param {Number} opts.periodLastComment filter by period when content was last commented
     * @param {Number} opts.periodPublished filter by py period when content was published
     * @param {Number} opts.periodUpdated filter by py period when content was updated
     * @param {module:DeskPRO\API/Client/ContentApi~getArticleCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getArticleCount(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'author': opts['author'],
        'category': opts['category'],
        'group_by': opts['groupBy'],
        'status': opts['status'],
        'hidden_status': opts['hiddenStatus'],
        'period_created': opts['periodCreated'],
        'period_last_comment': opts['periodLastComment'],
        'period_published': opts['periodPublished'],
        'period_updated': opts['periodUpdated']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/articles/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticlePendingCreateById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getArticlePendingCreateByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~getArticlePendingCreateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getArticlePendingCreateById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getArticlePendingCreateById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/article_pending_creates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticlePendingCreateCount operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getArticlePendingCreateCountCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count list
     * @param {Object} opts Optional parameters
     * @param {String} opts.assignedPerson 
     * @param {module:DeskPRO\API/Client/ContentApi~getArticlePendingCreateCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getArticlePendingCreateCount(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'assigned_person': opts['assignedPerson']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/article_pending_creates/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticlePendingCreates operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getArticlePendingCreatesCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection of resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page to display
     * @param {Number} opts.count Resource per page count
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.ids Comma separated list of IDs
     * @param {String} opts.assignedPerson 
     * @param {String} opts.orderBy how to order result
     * @param {String} opts.orderDir order direction
     * @param {module:DeskPRO\API/Client/ContentApi~getArticlePendingCreatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getArticlePendingCreates(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'limit': opts['limit'],
        'ids': opts['ids'],
        'assigned_person': opts['assignedPerson'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/article_pending_creates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticles operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getArticlesCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection of resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page to display
     * @param {Number} opts.count Resource per page count
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.ids Comma separated list of IDs
     * @param {String} opts.author filter by author, provide an id or &#39;me&#39; for current user
     * @param {Number} opts.category filter category, could be an array or just digit
     * @param {String} opts.groupBy how to group downloads
     * @param {String} opts.status filter by status
     * @param {Number} opts.hiddenStatus select for article with given id
     * @param {Number} opts.periodCreated filter by period when content was created
     * @param {Number} opts.periodLastComment filter by period when content was last commented
     * @param {Number} opts.periodPublished filter by py period when content was published
     * @param {Number} opts.periodUpdated filter by py period when content was updated
     * @param {Number} opts.orderBy how to order
     * @param {module:DeskPRO\API/Client/ContentApi~getArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getArticles(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'limit': opts['limit'],
        'ids': opts['ids'],
        'author': opts['author'],
        'category': opts['category'],
        'group_by': opts['groupBy'],
        'status': opts['status'],
        'hidden_status': opts['hiddenStatus'],
        'period_created': opts['periodCreated'],
        'period_last_comment': opts['periodLastComment'],
        'period_published': opts['periodPublished'],
        'period_updated': opts['periodUpdated'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/articles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentCategories operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getContentCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get categories for articles, news and downloads
     * @param {module:DeskPRO\API/Client/ContentApi~getContentCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getContentCategories(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/content_categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDownloadById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getDownloadByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~getDownloadByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getDownloadById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDownloadById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/downloads/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDownloadCategories operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getDownloadCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection of resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page to display
     * @param {Number} opts.count Resource per page count
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.ids Comma separated list of IDs
     * @param {module:DeskPRO\API/Client/ContentApi~getDownloadCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getDownloadCategories(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'limit': opts['limit'],
        'ids': opts['ids']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/download_categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDownloadCategoryById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getDownloadCategoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~getDownloadCategoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getDownloadCategoryById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDownloadCategoryById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/download_categories/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDownloadCategoryCount operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getDownloadCategoryCountCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count list
     * @param {module:DeskPRO\API/Client/ContentApi~getDownloadCategoryCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getDownloadCategoryCount(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/download_categories/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDownloadCommentById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getDownloadCommentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~getDownloadCommentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getDownloadCommentById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDownloadCommentById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/download_comments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDownloadCommentCount operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getDownloadCommentCountCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count list
     * @param {Object} opts Optional parameters
     * @param {String} opts.status filter by status
     * @param {Number} opts.isReviewed filter by reviewed status
     * @param {String} opts.periodCreated filter by period
     * @param {Number} opts.article select comments for article with given id
     * @param {Number} opts.download select comments for download with given id
     * @param {Number} opts.news select comments for news with given id
     * @param {String} opts.groupBy how to groups comments
     * @param {module:DeskPRO\API/Client/ContentApi~getDownloadCommentCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getDownloadCommentCount(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'is_reviewed': opts['isReviewed'],
        'period_created': opts['periodCreated'],
        'article': opts['article'],
        'download': opts['download'],
        'news': opts['news'],
        'group_by': opts['groupBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/download_comments/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDownloadComments operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getDownloadCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection of resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page to display
     * @param {Number} opts.count Resource per page count
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.ids Comma separated list of IDs
     * @param {String} opts.status filter by status
     * @param {Number} opts.isReviewed filter by reviewed status
     * @param {String} opts.periodCreated filter by period
     * @param {Number} opts.article select comments for article with given id
     * @param {Number} opts.download select comments for download with given id
     * @param {Number} opts.news select comments for news with given id
     * @param {String} opts.orderBy how to order comments
     * @param {module:DeskPRO\API/Client/ContentApi~getDownloadCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getDownloadComments(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'limit': opts['limit'],
        'ids': opts['ids'],
        'status': opts['status'],
        'is_reviewed': opts['isReviewed'],
        'period_created': opts['periodCreated'],
        'article': opts['article'],
        'download': opts['download'],
        'news': opts['news'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/download_comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDownloadCount operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getDownloadCountCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count list
     * @param {Object} opts Optional parameters
     * @param {String} opts.author filter by author, provide an id or &#39;me&#39; for current user
     * @param {Number} opts.category filter category, could be an array or just digit
     * @param {String} opts.groupBy how to group counters
     * @param {String} opts.status filter by status
     * @param {Number} opts.hiddenStatus select for article with given id
     * @param {Number} opts.periodCreated filter by period when content was created
     * @param {Number} opts.periodLastComment filter by period when content was last commented
     * @param {Number} opts.periodPublished filter by py period when content was published
     * @param {Number} opts.periodUpdated filter by py period when content was updated
     * @param {module:DeskPRO\API/Client/ContentApi~getDownloadCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getDownloadCount(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'author': opts['author'],
        'category': opts['category'],
        'group_by': opts['groupBy'],
        'status': opts['status'],
        'hidden_status': opts['hiddenStatus'],
        'period_created': opts['periodCreated'],
        'period_last_comment': opts['periodLastComment'],
        'period_published': opts['periodPublished'],
        'period_updated': opts['periodUpdated']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/downloads/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDownloads operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getDownloadsCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection of resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page to display
     * @param {Number} opts.count Resource per page count
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.ids Comma separated list of IDs
     * @param {String} opts.author filter by author, provide an id or &#39;me&#39; for current user
     * @param {Number} opts.category filter category, could be an array or just digit
     * @param {String} opts.groupBy how to group downloads
     * @param {String} opts.status filter by status
     * @param {Number} opts.hiddenStatus select for article with given id
     * @param {Number} opts.periodCreated filter by period when content was created
     * @param {Number} opts.periodLastComment filter by period when content was last commented
     * @param {Number} opts.periodPublished filter by py period when content was published
     * @param {Number} opts.periodUpdated filter by py period when content was updated
     * @param {Number} opts.orderBy how to order
     * @param {module:DeskPRO\API/Client/ContentApi~getDownloadsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getDownloads(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'limit': opts['limit'],
        'ids': opts['ids'],
        'author': opts['author'],
        'category': opts['category'],
        'group_by': opts['groupBy'],
        'status': opts['status'],
        'hidden_status': opts['hiddenStatus'],
        'period_created': opts['periodCreated'],
        'period_last_comment': opts['periodLastComment'],
        'period_published': opts['periodPublished'],
        'period_updated': opts['periodUpdated'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/downloads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGuideByGuideIdExport operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getGuideByGuideIdExportCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * export a full json of the guide
     * @param {String} guideId 
     * @param {module:DeskPRO\API/Client/ContentApi~getGuideByGuideIdExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getGuideByGuideIdExport(guideId, callback) {
      let postBody = null;

      // verify the required parameter 'guideId' is set
      if (guideId === undefined || guideId === null) {
        throw new Error("Missing the required parameter 'guideId' when calling getGuideByGuideIdExport");
      }


      let pathParams = {
        'guideId': guideId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/guides/{guideId}/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGuideByGuideIdTree operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getGuideByGuideIdTreeCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * give a topics tree list of a guide
     * @param {String} guideId 
     * @param {module:DeskPRO\API/Client/ContentApi~getGuideByGuideIdTreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getGuideByGuideIdTree(guideId, callback) {
      let postBody = null;

      // verify the required parameter 'guideId' is set
      if (guideId === undefined || guideId === null) {
        throw new Error("Missing the required parameter 'guideId' when calling getGuideByGuideIdTree");
      }


      let pathParams = {
        'guideId': guideId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/guides/{guideId}/tree', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGuideById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getGuideByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~getGuideByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getGuideById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGuideById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/guides/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGuideCount operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getGuideCountCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count list
     * @param {module:DeskPRO\API/Client/ContentApi~getGuideCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getGuideCount(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/guides/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGuides operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getGuidesCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection of resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page to display
     * @param {Number} opts.count Resource per page count
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.ids Comma separated list of IDs
     * @param {module:DeskPRO\API/Client/ContentApi~getGuidesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getGuides(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'limit': opts['limit'],
        'ids': opts['ids']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/guides', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNews operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getNewsCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection of resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page to display
     * @param {Number} opts.count Resource per page count
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.ids Comma separated list of IDs
     * @param {String} opts.author filter by author, provide an id or &#39;me&#39; for current user
     * @param {Number} opts.category filter category, could be an array or just digit
     * @param {String} opts.groupBy how to group downloads
     * @param {String} opts.status filter by status
     * @param {Number} opts.hiddenStatus select for article with given id
     * @param {Number} opts.periodCreated filter by period when content was created
     * @param {Number} opts.periodLastComment filter by period when content was last commented
     * @param {Number} opts.periodPublished filter by py period when content was published
     * @param {Number} opts.periodUpdated filter by py period when content was updated
     * @param {Number} opts.orderBy how to order
     * @param {module:DeskPRO\API/Client/ContentApi~getNewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getNews(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'limit': opts['limit'],
        'ids': opts['ids'],
        'author': opts['author'],
        'category': opts['category'],
        'group_by': opts['groupBy'],
        'status': opts['status'],
        'hidden_status': opts['hiddenStatus'],
        'period_created': opts['periodCreated'],
        'period_last_comment': opts['periodLastComment'],
        'period_published': opts['periodPublished'],
        'period_updated': opts['periodUpdated'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/news', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewsById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getNewsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~getNewsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getNewsById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNewsById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/news/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewsCategories operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getNewsCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection of resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page to display
     * @param {Number} opts.count Resource per page count
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.ids Comma separated list of IDs
     * @param {module:DeskPRO\API/Client/ContentApi~getNewsCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getNewsCategories(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'limit': opts['limit'],
        'ids': opts['ids']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/news_categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewsCategoryById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getNewsCategoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~getNewsCategoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getNewsCategoryById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNewsCategoryById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/news_categories/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewsCategoryCount operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getNewsCategoryCountCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count list
     * @param {module:DeskPRO\API/Client/ContentApi~getNewsCategoryCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getNewsCategoryCount(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/news_categories/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewsCommentById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getNewsCommentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~getNewsCommentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getNewsCommentById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNewsCommentById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/news_comments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewsCommentCount operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getNewsCommentCountCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count list
     * @param {Object} opts Optional parameters
     * @param {String} opts.status filter by status
     * @param {Number} opts.isReviewed filter by reviewed status
     * @param {String} opts.periodCreated filter by period
     * @param {Number} opts.article select comments for article with given id
     * @param {Number} opts.download select comments for download with given id
     * @param {Number} opts.news select comments for news with given id
     * @param {String} opts.groupBy how to groups comments
     * @param {module:DeskPRO\API/Client/ContentApi~getNewsCommentCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getNewsCommentCount(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'is_reviewed': opts['isReviewed'],
        'period_created': opts['periodCreated'],
        'article': opts['article'],
        'download': opts['download'],
        'news': opts['news'],
        'group_by': opts['groupBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/news_comments/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewsComments operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getNewsCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection of resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page to display
     * @param {Number} opts.count Resource per page count
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.ids Comma separated list of IDs
     * @param {String} opts.status filter by status
     * @param {Number} opts.isReviewed filter by reviewed status
     * @param {String} opts.periodCreated filter by period
     * @param {Number} opts.article select comments for article with given id
     * @param {Number} opts.download select comments for download with given id
     * @param {Number} opts.news select comments for news with given id
     * @param {String} opts.orderBy how to order comments
     * @param {module:DeskPRO\API/Client/ContentApi~getNewsCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getNewsComments(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'limit': opts['limit'],
        'ids': opts['ids'],
        'status': opts['status'],
        'is_reviewed': opts['isReviewed'],
        'period_created': opts['periodCreated'],
        'article': opts['article'],
        'download': opts['download'],
        'news': opts['news'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/news_comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewsCount operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getNewsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count list
     * @param {Object} opts Optional parameters
     * @param {String} opts.author filter by author, provide an id or &#39;me&#39; for current user
     * @param {Number} opts.category filter category, could be an array or just digit
     * @param {String} opts.groupBy how to group counters
     * @param {String} opts.status filter by status
     * @param {Number} opts.hiddenStatus select for article with given id
     * @param {Number} opts.periodCreated filter by period when content was created
     * @param {Number} opts.periodLastComment filter by period when content was last commented
     * @param {Number} opts.periodPublished filter by py period when content was published
     * @param {Number} opts.periodUpdated filter by py period when content was updated
     * @param {module:DeskPRO\API/Client/ContentApi~getNewsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getNewsCount(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'author': opts['author'],
        'category': opts['category'],
        'group_by': opts['groupBy'],
        'status': opts['status'],
        'hidden_status': opts['hiddenStatus'],
        'period_created': opts['periodCreated'],
        'period_last_comment': opts['periodLastComment'],
        'period_published': opts['periodPublished'],
        'period_updated': opts['periodUpdated']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/news/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopicById operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getTopicByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/ContentApi~getTopicByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getTopicById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTopicById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/topics/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopicCount operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getTopicCountCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count list
     * @param {Object} opts Optional parameters
     * @param {String} opts.author filter by author, provide an id or &#39;me&#39; for current user
     * @param {Number} opts.guide filter category, could be an array or just digit
     * @param {String} opts.groupBy how to group counters
     * @param {String} opts.status filter by status
     * @param {Number} opts.hiddenStatus select for article with given id
     * @param {Number} opts.periodCreated filter by period when content was created
     * @param {Number} opts.periodLastComment filter by period when content was last commented
     * @param {Number} opts.periodPublished filter by py period when content was published
     * @param {Number} opts.periodUpdated filter by py period when content was updated
     * @param {module:DeskPRO\API/Client/ContentApi~getTopicCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getTopicCount(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'author': opts['author'],
        'guide': opts['guide'],
        'group_by': opts['groupBy'],
        'status': opts['status'],
        'hidden_status': opts['hiddenStatus'],
        'period_created': opts['periodCreated'],
        'period_last_comment': opts['periodLastComment'],
        'period_published': opts['periodPublished'],
        'period_updated': opts['periodUpdated']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/topics/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopics operation.
     * @callback module:DeskPRO\API/Client/ContentApi~getTopicsCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection of resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page to display
     * @param {Number} opts.count Resource per page count
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.ids Comma separated list of IDs
     * @param {String} opts.author filter by author, provide an id or &#39;me&#39; for current user
     * @param {Number} opts.guide filter category, could be an array or just digit
     * @param {String} opts.groupBy how to group downloads
     * @param {String} opts.status filter by status
     * @param {Number} opts.hiddenStatus select for article with given id
     * @param {Number} opts.periodCreated filter by period when content was created
     * @param {Number} opts.periodLastComment filter by period when content was last commented
     * @param {Number} opts.periodPublished filter by py period when content was published
     * @param {Number} opts.periodUpdated filter by py period when content was updated
     * @param {Number} opts.orderBy how to order
     * @param {module:DeskPRO\API/Client/ContentApi~getTopicsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getTopics(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'limit': opts['limit'],
        'ids': opts['ids'],
        'author': opts['author'],
        'guide': opts['guide'],
        'group_by': opts['groupBy'],
        'status': opts['status'],
        'hidden_status': opts['hiddenStatus'],
        'period_created': opts['periodCreated'],
        'period_last_comment': opts['periodLastComment'],
        'period_published': opts['periodPublished'],
        'period_updated': opts['periodUpdated'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/topics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGuideByGuideIdTree operation.
     * @callback module:DeskPRO\API/Client/ContentApi~updateGuideByGuideIdTreeCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * save the tree structure
     * @param {String} guideId 
     * @param {Array.<String>} tree 
     * @param {module:DeskPRO\API/Client/ContentApi~updateGuideByGuideIdTreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    updateGuideByGuideIdTree(guideId, tree, callback) {
      let postBody = null;

      // verify the required parameter 'guideId' is set
      if (guideId === undefined || guideId === null) {
        throw new Error("Missing the required parameter 'guideId' when calling updateGuideByGuideIdTree");
      }

      // verify the required parameter 'tree' is set
      if (tree === undefined || tree === null) {
        throw new Error("Missing the required parameter 'tree' when calling updateGuideByGuideIdTree");
      }


      let pathParams = {
        'guideId': guideId
      };
      let queryParams = {
        'tree': this.apiClient.buildCollectionParam(tree, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/guides/{guideId}/tree', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
