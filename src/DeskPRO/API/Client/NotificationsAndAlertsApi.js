/**
 * DeskPRO API
 * DeskPRO API
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../Model/Error';
import Response from '../Model/Response';

/**
* NotificationsAndAlerts service.
* @module DeskPRO\API/Client/NotificationsAndAlertsApi
* @version 2.0.0
*/
export default class NotificationsAndAlertsApi {

    /**
    * Constructs a new NotificationsAndAlertsApi. 
    * @alias module:DeskPRO\API/Client/NotificationsAndAlertsApi
    * @class
    * @param {module:DeskPRO\API/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:DeskPRO\API/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteMeNotificationById operation.
     * @callback module:DeskPRO\API/Client/NotificationsAndAlertsApi~deleteMeNotificationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/NotificationsAndAlertsApi~deleteMeNotificationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    deleteMeNotificationById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMeNotificationById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/me/notifications/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMeNotification operation.
     * @callback module:DeskPRO\API/Client/NotificationsAndAlertsApi~getMeNotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection of resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page to display
     * @param {Number} opts.count Resource per page count
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.ids Comma separated list of IDs
     * @param {module:DeskPRO\API/Client/NotificationsAndAlertsApi~getMeNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getMeNotification(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'limit': opts['limit'],
        'ids': opts['ids']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/me/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMeNotificationById operation.
     * @callback module:DeskPRO\API/Client/NotificationsAndAlertsApi~getMeNotificationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/NotificationsAndAlertsApi~getMeNotificationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getMeNotificationById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMeNotificationById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/me/notifications/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMeNotificationCount operation.
     * @callback module:DeskPRO\API/Client/NotificationsAndAlertsApi~getMeNotificationCountCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count list
     * @param {module:DeskPRO\API/Client/NotificationsAndAlertsApi~getMeNotificationCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getMeNotificationCount(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/me/notifications/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotifySetupActionAlert operation.
     * @callback module:DeskPRO\API/Client/NotificationsAndAlertsApi~getNotifySetupActionAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * You can use this endpoint to gather information about clients you need to obtain notifications and alerts.
     * @param {module:DeskPRO\API/Client/NotificationsAndAlertsApi~getNotifySetupActionAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getNotifySetupActionAlert(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/notify/setup/action-alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotifySetupActionAlertClient operation.
     * @callback module:DeskPRO\API/Client/NotificationsAndAlertsApi~getNotifySetupActionAlertClientCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint provide you an ability to get pusher credentials you are using (admin only).
     * @param {Number} userId 
     * @param {String} channelName 
     * @param {String} socketId 
     * @param {module:DeskPRO\API/Client/NotificationsAndAlertsApi~getNotifySetupActionAlertClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getNotifySetupActionAlertClient(userId, channelName, socketId, callback) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getNotifySetupActionAlertClient");
      }

      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling getNotifySetupActionAlertClient");
      }

      // verify the required parameter 'socketId' is set
      if (socketId === undefined || socketId === null) {
        throw new Error("Missing the required parameter 'socketId' when calling getNotifySetupActionAlertClient");
      }


      let pathParams = {
      };
      let queryParams = {
        'user_id': userId,
        'channel_name': channelName,
        'socket_id': socketId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/notify/setup/action-alerts/clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setMeNotificationDismi operation.
     * @callback module:DeskPRO\API/Client/NotificationsAndAlertsApi~setMeNotificationDismiCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dismiss set of alerts
     * @param {Array.<String>} alertIds 
     * @param {module:DeskPRO\API/Client/NotificationsAndAlertsApi~setMeNotificationDismiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    setMeNotificationDismi(alertIds, callback) {
      let postBody = null;

      // verify the required parameter 'alertIds' is set
      if (alertIds === undefined || alertIds === null) {
        throw new Error("Missing the required parameter 'alertIds' when calling setMeNotificationDismi");
      }


      let pathParams = {
      };
      let queryParams = {
        'alert_ids': this.apiClient.buildCollectionParam(alertIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/me/notifications/dismiss', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setMeNotificationDismiAll operation.
     * @callback module:DeskPRO\API/Client/NotificationsAndAlertsApi~setMeNotificationDismiAllCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * dismiss all alerts for the current user
     * @param {module:DeskPRO\API/Client/NotificationsAndAlertsApi~setMeNotificationDismiAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    setMeNotificationDismiAll(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/me/notifications/dismiss/all', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setPusherAuth operation.
     * @callback module:DeskPRO\API/Client/NotificationsAndAlertsApi~setPusherAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint provide you an ability to authenticate pusher app.
     * @param {Number} userId 
     * @param {String} channelName 
     * @param {String} socketId 
     * @param {module:DeskPRO\API/Client/NotificationsAndAlertsApi~setPusherAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    setPusherAuth(userId, channelName, socketId, callback) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setPusherAuth");
      }

      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling setPusherAuth");
      }

      // verify the required parameter 'socketId' is set
      if (socketId === undefined || socketId === null) {
        throw new Error("Missing the required parameter 'socketId' when calling setPusherAuth");
      }


      let pathParams = {
      };
      let queryParams = {
        'user_id': userId,
        'channel_name': channelName,
        'socket_id': socketId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/pusher/auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNotifySetupActionAlertClient operation.
     * @callback module:DeskPRO\API/Client/NotificationsAndAlertsApi~updateNotifySetupActionAlertClientCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save pusher credentials and enable/disable it.
     * @param {String} id 
     * @param {String} key 
     * @param {String} secret 
     * @param {String} host 
     * @param {String} port 
     * @param {String} mode 
     * @param {module:DeskPRO\API/Client/NotificationsAndAlertsApi~updateNotifySetupActionAlertClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    updateNotifySetupActionAlertClient(id, key, secret, host, port, mode, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNotifySetupActionAlertClient");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateNotifySetupActionAlertClient");
      }

      // verify the required parameter 'secret' is set
      if (secret === undefined || secret === null) {
        throw new Error("Missing the required parameter 'secret' when calling updateNotifySetupActionAlertClient");
      }

      // verify the required parameter 'host' is set
      if (host === undefined || host === null) {
        throw new Error("Missing the required parameter 'host' when calling updateNotifySetupActionAlertClient");
      }

      // verify the required parameter 'port' is set
      if (port === undefined || port === null) {
        throw new Error("Missing the required parameter 'port' when calling updateNotifySetupActionAlertClient");
      }

      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling updateNotifySetupActionAlertClient");
      }


      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'key': key,
        'secret': secret,
        'host': host,
        'port': port,
        'mode': mode
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/notify/setup/action-alerts/clients', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
