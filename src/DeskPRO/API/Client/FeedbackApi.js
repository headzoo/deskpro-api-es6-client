/**
 * DeskPRO API
 * DeskPRO API
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../Model/Error';
import Response from '../Model/Response';

/**
* Feedback service.
* @module DeskPRO\API/Client/FeedbackApi
* @version 2.0.0
*/
export default class FeedbackApi {

    /**
    * Constructs a new FeedbackApi. 
    * @alias module:DeskPRO\API/Client/FeedbackApi
    * @class
    * @param {module:DeskPRO\API/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:DeskPRO\API/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteFeedbackById operation.
     * @callback module:DeskPRO\API/Client/FeedbackApi~deleteFeedbackByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/FeedbackApi~deleteFeedbackByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    deleteFeedbackById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFeedbackById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/feedback/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFeedbackCommentById operation.
     * @callback module:DeskPRO\API/Client/FeedbackApi~deleteFeedbackCommentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/FeedbackApi~deleteFeedbackCommentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    deleteFeedbackCommentById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFeedbackCommentById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/feedback_comments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeedback operation.
     * @callback module:DeskPRO\API/Client/FeedbackApi~getFeedbackCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection of resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page to display
     * @param {Number} opts.count Resource per page count
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.ids comma separated ids list
     * @param {Boolean} opts.awaitingValidation select feedback awaiting validation only
     * @param {String} opts.status filter by status
     * @param {Number} opts.hiddenStatus limit with hidden_status
     * @param {String} opts.statusCategory filter by status category
     * @param {String} opts.category category title, or titles array
     * @param {String} opts.customCategory filter by custom category
     * @param {String} opts.labelsMode how to load labels
     * @param {String} opts.label select feedback with given lables
     * @param {Boolean} opts.noLabels select feedback have no label
     * @param {String} opts.createdFrom limit by date, interval&#x60;s start
     * @param {String} opts.createdTo limit by date, interval&#x60;s end
     * @param {String} opts.feedbackFieldId   *                  Custom feedback field filter. To filter by a custom field with ID&#x3D;1 you need to add  *                  ?feedback_field.1&#x3D;value to the query string
     * @param {String} opts.orderBy how to order result
     * @param {String} opts.orderDir order direction
     * @param {module:DeskPRO\API/Client/FeedbackApi~getFeedbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getFeedback(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'limit': opts['limit'],
        'ids': opts['ids'],
        'awaiting_validation': opts['awaitingValidation'],
        'status': opts['status'],
        'hidden_status': opts['hiddenStatus'],
        'status_category': opts['statusCategory'],
        'category': opts['category'],
        'custom_category': opts['customCategory'],
        'labels_mode': opts['labelsMode'],
        'label': opts['label'],
        'no_labels': opts['noLabels'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'feedback_field.{id}': opts['feedbackFieldId'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/feedback', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeedbackById operation.
     * @callback module:DeskPRO\API/Client/FeedbackApi~getFeedbackByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/FeedbackApi~getFeedbackByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getFeedbackById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFeedbackById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/feedback/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeedbackCategories operation.
     * @callback module:DeskPRO\API/Client/FeedbackApi~getFeedbackCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get list of feedback categories
     * @param {module:DeskPRO\API/Client/FeedbackApi~getFeedbackCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getFeedbackCategories(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/feedback_categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeedbackCommentById operation.
     * @callback module:DeskPRO\API/Client/FeedbackApi~getFeedbackCommentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/FeedbackApi~getFeedbackCommentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getFeedbackCommentById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFeedbackCommentById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/feedback_comments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeedbackCommentCount operation.
     * @callback module:DeskPRO\API/Client/FeedbackApi~getFeedbackCommentCountCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count list
     * @param {module:DeskPRO\API/Client/FeedbackApi~getFeedbackCommentCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getFeedbackCommentCount(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/feedback_comments/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeedbackComments operation.
     * @callback module:DeskPRO\API/Client/FeedbackApi~getFeedbackCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get list of feedback comments
     * @param {Object} opts Optional parameters
     * @param {String} opts.page current page
     * @param {String} opts.count per page comments quantity
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.ids a comma separated list of comment&#x60;s ids
     * @param {String} opts.awaitingValidation set it if you want to fetch new comments
     * @param {String} opts.category category to search, exact name
     * @param {Number} opts.statusCategory integer represents status category
     * @param {String} opts.label a comma separated list of exact label names
     * @param {Boolean} opts.noLabels boolean value
     * @param {String} opts.customCategory an array of exact custom categories names
     * @param {Number} opts.status an integer value represents current status
     * @param {String} opts.hiddenStatus an integer value represents current hidden_status
     * @param {String} opts.createdFrom a datetime string to search comments since
     * @param {String} opts.createdTo a datetime string to search comments until
     * @param {String} opts.feedbackFieldId   *                  Custom feedback field filter. To filter by a custom field with ID&#x3D;1 you need to add  *                  ?feedback_field.1&#x3D;value to the query string
     * @param {module:DeskPRO\API/Client/FeedbackApi~getFeedbackCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getFeedbackComments(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'limit': opts['limit'],
        'ids': opts['ids'],
        'awaiting_validation': opts['awaitingValidation'],
        'category': opts['category'],
        'statusCategory': opts['statusCategory'],
        'label': opts['label'],
        'no_labels': opts['noLabels'],
        'custom_category': opts['customCategory'],
        'status': opts['status'],
        'hidden_status': opts['hiddenStatus'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'feedback_field.{id}': opts['feedbackFieldId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/feedback_comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeedbackCount operation.
     * @callback module:DeskPRO\API/Client/FeedbackApi~getFeedbackCountCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count list
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.awaitingValidation select feedback awaiting validation only
     * @param {String} opts.status filter by status
     * @param {Number} opts.hiddenStatus limit with hidden_status
     * @param {String} opts.statusCategory filter by status category
     * @param {String} opts.category category title, or titles array
     * @param {String} opts.customCategory filter by custom category
     * @param {String} opts.labelsMode how to load labels
     * @param {String} opts.label select feedback with given lables
     * @param {Boolean} opts.noLabels select feedback have no label
     * @param {String} opts.ids comma separated ids list
     * @param {String} opts.createdFrom limit by date, interval&#x60;s start
     * @param {String} opts.createdTo limit by date, interval&#x60;s end
     * @param {String} opts.feedbackFieldId   *                  Custom feedback field filter. To filter by a custom field with ID&#x3D;1 you need to add  *                  ?feedback_field.1&#x3D;value to the query string
     * @param {Boolean} opts.groupBy how to group counts
     * @param {module:DeskPRO\API/Client/FeedbackApi~getFeedbackCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getFeedbackCount(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'awaiting_validation': opts['awaitingValidation'],
        'status': opts['status'],
        'hidden_status': opts['hiddenStatus'],
        'status_category': opts['statusCategory'],
        'category': opts['category'],
        'custom_category': opts['customCategory'],
        'labels_mode': opts['labelsMode'],
        'label': opts['label'],
        'no_labels': opts['noLabels'],
        'ids': opts['ids'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'feedback_field.{id}': opts['feedbackFieldId'],
        'group_by': opts['groupBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/feedback/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeedbackTypeById operation.
     * @callback module:DeskPRO\API/Client/FeedbackApi~getFeedbackTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource
     * @param {Number} id The id of the resource
     * @param {module:DeskPRO\API/Client/FeedbackApi~getFeedbackTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getFeedbackTypeById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFeedbackTypeById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/feedback_types/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeedbackTypeCount operation.
     * @callback module:DeskPRO\API/Client/FeedbackApi~getFeedbackTypeCountCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count list
     * @param {module:DeskPRO\API/Client/FeedbackApi~getFeedbackTypeCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getFeedbackTypeCount(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/feedback_types/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeedbackTypes operation.
     * @callback module:DeskPRO\API/Client/FeedbackApi~getFeedbackTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:DeskPRO\API/Model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection of resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page to display
     * @param {Number} opts.count Resource per page count
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.ids Comma separated list of IDs
     * @param {module:DeskPRO\API/Client/FeedbackApi~getFeedbackTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:DeskPRO\API/Model/Response}
     */
    getFeedbackTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'limit': opts['limit'],
        'ids': opts['ids']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/feedback_types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
