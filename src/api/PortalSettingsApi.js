/**
 * DeskPRO API
 * DeskPRO API
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Response from '../model/Response';

/**
* PortalSettings service.
* @module api/PortalSettingsApi
* @version 2.0.0
*/
export default class PortalSettingsApi {

    /**
    * Constructs a new PortalSettingsApi. 
    * @alias module:api/PortalSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get portal general settings
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getSettingBrandByBrandPortalDownloadWithHttpInfo(brand) {
      let postBody = null;

      // verify the required parameter 'brand' is set
      if (brand === undefined || brand === null) {
        throw new Error("Missing the required parameter 'brand' when calling getSettingBrandByBrandPortalDownload");
      }


      let pathParams = {
        'brand': brand
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/settings/brands/{brand}/portal/downloads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get portal general settings
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getSettingBrandByBrandPortalDownload(brand) {
      return this.getSettingBrandByBrandPortalDownloadWithHttpInfo(brand)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get portal general settings
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getSettingBrandByBrandPortalFeedbackWithHttpInfo(brand) {
      let postBody = null;

      // verify the required parameter 'brand' is set
      if (brand === undefined || brand === null) {
        throw new Error("Missing the required parameter 'brand' when calling getSettingBrandByBrandPortalFeedback");
      }


      let pathParams = {
        'brand': brand
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/settings/brands/{brand}/portal/feedback', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get portal general settings
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getSettingBrandByBrandPortalFeedback(brand) {
      return this.getSettingBrandByBrandPortalFeedbackWithHttpInfo(brand)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get portal general settings
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getSettingBrandByBrandPortalGeneralWithHttpInfo(brand) {
      let postBody = null;

      // verify the required parameter 'brand' is set
      if (brand === undefined || brand === null) {
        throw new Error("Missing the required parameter 'brand' when calling getSettingBrandByBrandPortalGeneral");
      }


      let pathParams = {
        'brand': brand
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/settings/brands/{brand}/portal/general', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get portal general settings
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getSettingBrandByBrandPortalGeneral(brand) {
      return this.getSettingBrandByBrandPortalGeneralWithHttpInfo(brand)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get portal general settings
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getSettingBrandByBrandPortalGuideWithHttpInfo(brand) {
      let postBody = null;

      // verify the required parameter 'brand' is set
      if (brand === undefined || brand === null) {
        throw new Error("Missing the required parameter 'brand' when calling getSettingBrandByBrandPortalGuide");
      }


      let pathParams = {
        'brand': brand
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/settings/brands/{brand}/portal/guides', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get portal general settings
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getSettingBrandByBrandPortalGuide(brand) {
      return this.getSettingBrandByBrandPortalGuideWithHttpInfo(brand)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get portal general settings
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getSettingBrandByBrandPortalKbWithHttpInfo(brand) {
      let postBody = null;

      // verify the required parameter 'brand' is set
      if (brand === undefined || brand === null) {
        throw new Error("Missing the required parameter 'brand' when calling getSettingBrandByBrandPortalKb");
      }


      let pathParams = {
        'brand': brand
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/settings/brands/{brand}/portal/kb', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get portal general settings
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getSettingBrandByBrandPortalKb(brand) {
      return this.getSettingBrandByBrandPortalKbWithHttpInfo(brand)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get portal general settings
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getSettingBrandByBrandPortalNewsWithHttpInfo(brand) {
      let postBody = null;

      // verify the required parameter 'brand' is set
      if (brand === undefined || brand === null) {
        throw new Error("Missing the required parameter 'brand' when calling getSettingBrandByBrandPortalNews");
      }


      let pathParams = {
        'brand': brand
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/settings/brands/{brand}/portal/news', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get portal general settings
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getSettingBrandByBrandPortalNews(brand) {
      return this.getSettingBrandByBrandPortalNewsWithHttpInfo(brand)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
