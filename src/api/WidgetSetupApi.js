/**
 * DeskPRO API
 * DeskPRO API
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Response from '../model/Response';

/**
* WidgetSetup service.
* @module api/WidgetSetupApi
* @version 2.0.0
*/
export default class WidgetSetupApi {

    /**
    * Constructs a new WidgetSetupApi. 
    * @alias module:api/WidgetSetupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * reset widget settings
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    deleteSettingBrandByBrandWidgetSetupWithHttpInfo(brand) {
      let postBody = null;

      // verify the required parameter 'brand' is set
      if (brand === undefined || brand === null) {
        throw new Error("Missing the required parameter 'brand' when calling deleteSettingBrandByBrandWidgetSetup");
      }


      let pathParams = {
        'brand': brand
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/settings/brands/{brand}/widget/setup', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * reset widget settings
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    deleteSettingBrandByBrandWidgetSetup(brand) {
      return this.deleteSettingBrandByBrandWidgetSetupWithHttpInfo(brand)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the HTML code for the widget
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getSettingBrandByBrandWidgetCodeWithHttpInfo(brand) {
      let postBody = null;

      // verify the required parameter 'brand' is set
      if (brand === undefined || brand === null) {
        throw new Error("Missing the required parameter 'brand' when calling getSettingBrandByBrandWidgetCode");
      }


      let pathParams = {
        'brand': brand
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/settings/brands/{brand}/widget/code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the HTML code for the widget
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getSettingBrandByBrandWidgetCode(brand) {
      return this.getSettingBrandByBrandWidgetCodeWithHttpInfo(brand)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the HTML code for the widget
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getSettingBrandByBrandWidgetLiveDemoCodeWithHttpInfo(brand) {
      let postBody = null;

      // verify the required parameter 'brand' is set
      if (brand === undefined || brand === null) {
        throw new Error("Missing the required parameter 'brand' when calling getSettingBrandByBrandWidgetLiveDemoCode");
      }


      let pathParams = {
        'brand': brand
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/settings/brands/{brand}/widget/live_demo_code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the HTML code for the widget
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getSettingBrandByBrandWidgetLiveDemoCode(brand) {
      return this.getSettingBrandByBrandWidgetLiveDemoCodeWithHttpInfo(brand)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get widget setup
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getSettingBrandByBrandWidgetSetupWithHttpInfo(brand) {
      let postBody = null;

      // verify the required parameter 'brand' is set
      if (brand === undefined || brand === null) {
        throw new Error("Missing the required parameter 'brand' when calling getSettingBrandByBrandWidgetSetup");
      }


      let pathParams = {
        'brand': brand
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/settings/brands/{brand}/widget/setup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * get widget setup
     * @param {String} brand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getSettingBrandByBrandWidgetSetup(brand) {
      return this.getSettingBrandByBrandWidgetSetupWithHttpInfo(brand)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
