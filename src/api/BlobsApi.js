/**
 * DeskPRO API
 * DeskPRO API
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Response from '../model/Response';

/**
* Blobs service.
* @module api/BlobsApi
* @version 2.0.0
*/
export default class BlobsApi {

    /**
    * Constructs a new BlobsApi. 
    * @alias module:api/BlobsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete a blob
     * @param {Number} authId The id of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    deleteBlobByAuthIdWithHttpInfo(authId) {
      let postBody = null;

      // verify the required parameter 'authId' is set
      if (authId === undefined || authId === null) {
        throw new Error("Missing the required parameter 'authId' when calling deleteBlobByAuthId");
      }


      let pathParams = {
        'authId': authId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/blobs/{authId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a blob
     * @param {Number} authId The id of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    deleteBlobByAuthId(authId) {
      return this.deleteBlobByAuthIdWithHttpInfo(authId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a resource
     * @param {Number} authId The id of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getBlobByAuthIdWithHttpInfo(authId) {
      let postBody = null;

      // verify the required parameter 'authId' is set
      if (authId === undefined || authId === null) {
        throw new Error("Missing the required parameter 'authId' when calling getBlobByAuthId");
      }


      let pathParams = {
        'authId': authId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/blobs/{authId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a resource
     * @param {Number} authId The id of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getBlobByAuthId(authId) {
      return this.getBlobByAuthIdWithHttpInfo(authId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * See archive info
     * @param {Number} authId The id of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getBlobByAuthIdArchiveWithHttpInfo(authId) {
      let postBody = null;

      // verify the required parameter 'authId' is set
      if (authId === undefined || authId === null) {
        throw new Error("Missing the required parameter 'authId' when calling getBlobByAuthIdArchive");
      }


      let pathParams = {
        'authId': authId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/blobs/{authId}/archive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * See archive info
     * @param {Number} authId The id of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getBlobByAuthIdArchive(authId) {
      return this.getBlobByAuthIdArchiveWithHttpInfo(authId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Serve archived content
     * @param {Number} authId The id of the resource
     * @param {String} path The path of the file
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getBlobByAuthIdDownloadByPathWithHttpInfo(authId, path) {
      let postBody = null;

      // verify the required parameter 'authId' is set
      if (authId === undefined || authId === null) {
        throw new Error("Missing the required parameter 'authId' when calling getBlobByAuthIdDownloadByPath");
      }

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getBlobByAuthIdDownloadByPath");
      }


      let pathParams = {
        'authId': authId,
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/blobs/{authId}/download/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Serve archived content
     * @param {Number} authId The id of the resource
     * @param {String} path The path of the file
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getBlobByAuthIdDownloadByPath(authId, path) {
      return this.getBlobByAuthIdDownloadByPathWithHttpInfo(authId, path)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * See archive content
     * @param {Number} authId The id of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getBlobByAuthIdFileWithHttpInfo(authId) {
      let postBody = null;

      // verify the required parameter 'authId' is set
      if (authId === undefined || authId === null) {
        throw new Error("Missing the required parameter 'authId' when calling getBlobByAuthIdFile");
      }


      let pathParams = {
        'authId': authId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/blobs/{authId}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * See archive content
     * @param {Number} authId The id of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getBlobByAuthIdFile(authId) {
      return this.getBlobByAuthIdFileWithHttpInfo(authId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get collection of resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page to display
     * @param {Number} opts.count Resource per page count
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.authIds Comma separated list of AuthIDs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getBlobsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'limit': opts['limit'],
        'authIds': opts['authIds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/blobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get collection of resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page to display
     * @param {Number} opts.count Resource per page count
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.authIds Comma separated list of AuthIDs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getBlobs(opts) {
      return this.getBlobsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
