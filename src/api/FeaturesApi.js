/**
 * DeskPRO API
 * DeskPRO API
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Response from '../model/Response';

/**
* Features service.
* @module api/FeaturesApi
* @version 2.0.0
*/
export default class FeaturesApi {

    /**
    * Constructs a new FeaturesApi. 
    * @alias module:api/FeaturesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get specific feature.
     * @param {String} feature 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id id of the feature
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getFeatureByFeatureWithHttpInfo(feature, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'feature' is set
      if (feature === undefined || feature === null) {
        throw new Error("Missing the required parameter 'feature' when calling getFeatureByFeature");
      }


      let pathParams = {
        'feature': feature
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/features/{feature}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get specific feature.
     * @param {String} feature 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id id of the feature
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getFeatureByFeature(feature, opts) {
      return this.getFeatureByFeatureWithHttpInfo(feature, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch available features list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getFeaturesWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Fetch available features list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getFeatures() {
      return this.getFeaturesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Queue feature disabling.
     * @param {String} feature 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id id of the feature
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    updateFeatureByFeatureDisableWithHttpInfo(feature, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'feature' is set
      if (feature === undefined || feature === null) {
        throw new Error("Missing the required parameter 'feature' when calling updateFeatureByFeatureDisable");
      }


      let pathParams = {
        'feature': feature
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/features/{feature}/disable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Queue feature disabling.
     * @param {String} feature 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id id of the feature
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    updateFeatureByFeatureDisable(feature, opts) {
      return this.updateFeatureByFeatureDisableWithHttpInfo(feature, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Queue feature enabling.
     * @param {String} feature 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id id of the feature
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    updateFeatureByFeatureEnableWithHttpInfo(feature, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'feature' is set
      if (feature === undefined || feature === null) {
        throw new Error("Missing the required parameter 'feature' when calling updateFeatureByFeatureEnable");
      }


      let pathParams = {
        'feature': feature
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/features/{feature}/enable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Queue feature enabling.
     * @param {String} feature 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id id of the feature
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    updateFeatureByFeatureEnable(feature, opts) {
      return this.updateFeatureByFeatureEnableWithHttpInfo(feature, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
