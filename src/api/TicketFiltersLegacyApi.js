/**
 * DeskPRO API
 * DeskPRO API
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Response from '../model/Response';

/**
* TicketFiltersLegacy service.
* @module api/TicketFiltersLegacyApi
* @version 2.0.0
*/
export default class TicketFiltersLegacyApi {

    /**
    * Constructs a new TicketFiltersLegacyApi. 
    * @alias module:api/TicketFiltersLegacyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get filter&#39;s tickets. See /tickets endpoint docs for the parameter details.
     * @param {String} filter 
     * @param {Object} opts Optional parameters
     * @param {String} opts.sort tickets list sort
     * @param {String} opts.order tickets list sort order
     * @param {Number} opts.page pagination page parameter
     * @param {Number} opts.count pagination results per page parameter.
     * @param {Number} opts.department department filter
     * @param {Number} opts.organization organization filter
     * @param {Number} opts.person person filter
     * @param {Number} opts.language language filter
     * @param {Number} opts.urgency urgency filter
     * @param {Number} opts.agent agent filter
     * @param {Number} opts.agentTeam agent team filter
     * @param {Number} opts.waitingTime user waiting time filter
     * @param {Number} opts.allWaitingTime total user waiting time filter
     * @param {Number} opts.dateCreated date created filter
     * @param {String} opts.ticketFieldId       *                 Custom ticket field filter. To filter by a custom field with ID&#x3D;1 you need to add      *                 ?ticket_field.1&#x3D;value to the query string
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getTicketFilterByFilterTicketWithHttpInfo(filter, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getTicketFilterByFilterTicket");
      }


      let pathParams = {
        'filter': filter
      };
      let queryParams = {
        'sort': opts['sort'],
        'order': opts['order'],
        'page': opts['page'],
        'count': opts['count'],
        'department': opts['department'],
        'organization': opts['organization'],
        'person': opts['person'],
        'language': opts['language'],
        'urgency': opts['urgency'],
        'agent': opts['agent'],
        'agent_team': opts['agentTeam'],
        'waiting_time': opts['waitingTime'],
        'all_waiting_time': opts['allWaitingTime'],
        'date_created': opts['dateCreated'],
        'ticket_field.{id}': opts['ticketFieldId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/ticket_filters/{filter}/tickets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get filter&#39;s tickets. See /tickets endpoint docs for the parameter details.
     * @param {String} filter 
     * @param {Object} opts Optional parameters
     * @param {String} opts.sort tickets list sort
     * @param {String} opts.order tickets list sort order
     * @param {Number} opts.page pagination page parameter
     * @param {Number} opts.count pagination results per page parameter.
     * @param {Number} opts.department department filter
     * @param {Number} opts.organization organization filter
     * @param {Number} opts.person person filter
     * @param {Number} opts.language language filter
     * @param {Number} opts.urgency urgency filter
     * @param {Number} opts.agent agent filter
     * @param {Number} opts.agentTeam agent team filter
     * @param {Number} opts.waitingTime user waiting time filter
     * @param {Number} opts.allWaitingTime total user waiting time filter
     * @param {Number} opts.dateCreated date created filter
     * @param {String} opts.ticketFieldId       *                 Custom ticket field filter. To filter by a custom field with ID&#x3D;1 you need to add      *                 ?ticket_field.1&#x3D;value to the query string
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getTicketFilterByFilterTicket(filter, opts) {
      return this.getTicketFilterByFilterTicketWithHttpInfo(filter, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a resource
     * @param {Number} id The id of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getTicketFilterByIdWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTicketFilterById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/ticket_filters/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a resource
     * @param {Number} id The id of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getTicketFilterById(id) {
      return this.getTicketFilterByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a filter&#39;s count
     * @param {Number} id the id of the filter
     * @param {Object} opts Optional parameters
     * @param {String} opts.groupBy the grouping order you want
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getTicketFilterByIdCountWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTicketFilterByIdCount");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'group_by': opts['groupBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/ticket_filters/{id}/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a filter&#39;s count
     * @param {Number} id the id of the filter
     * @param {Object} opts Optional parameters
     * @param {String} opts.groupBy the grouping order you want
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getTicketFilterByIdCount(id, opts) {
      return this.getTicketFilterByIdCountWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Count list
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getTicketFilterCountWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/ticket_filters/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Count list
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getTicketFilterCount() {
      return this.getTicketFilterCountWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all filter set counts
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.groupBy [Ticket filter ID &#x3D;&gt; group_by] map
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getTicketFilterSetAllCountWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'group_by': this.apiClient.buildCollectionParam(opts['groupBy'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/ticket_filter_sets/all/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all filter set counts
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.groupBy [Ticket filter ID &#x3D;&gt; group_by] map
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getTicketFilterSetAllCount(opts) {
      return this.getTicketFilterSetAllCountWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get a filter set
     * @param {Number} id the id of the filter set
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getTicketFilterSetByIdWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTicketFilterSetById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/ticket_filter_sets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * get a filter set
     * @param {Number} id the id of the filter set
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getTicketFilterSetById(id) {
      return this.getTicketFilterSetByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a filter set count
     * @param {Number} id the id of the filter
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.groupBy [Ticket filter ID &#x3D;&gt; group_by] map
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getTicketFilterSetByIdCountWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTicketFilterSetByIdCount");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'group_by': this.apiClient.buildCollectionParam(opts['groupBy'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/ticket_filter_sets/{id}/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a filter set count
     * @param {Number} id the id of the filter
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.groupBy [Ticket filter ID &#x3D;&gt; group_by] map
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getTicketFilterSetByIdCount(id, opts) {
      return this.getTicketFilterSetByIdCountWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get filters belong to filter set
     * @param {Number} id the id of the filter set
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getTicketFilterSetByIdFilterWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTicketFilterSetByIdFilter");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/ticket_filter_sets/{id}/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * get filters belong to filter set
     * @param {Number} id the id of the filter set
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getTicketFilterSetByIdFilter(id) {
      return this.getTicketFilterSetByIdFilterWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get filter sets
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getTicketFilterSetsWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/ticket_filter_sets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * get filter sets
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getTicketFilterSets() {
      return this.getTicketFilterSetsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get collection of resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page to display
     * @param {Number} opts.count Resource per page count
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.ids Comma separated list of IDs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getTicketFiltersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'limit': opts['limit'],
        'ids': opts['ids']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/ticket_filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get collection of resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page to display
     * @param {Number} opts.count Resource per page count
     * @param {Number} opts.limit Max number of resources to return
     * @param {String} opts.ids Comma separated list of IDs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getTicketFilters(opts) {
      return this.getTicketFiltersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all filters counts
     * @param {Object} opts Optional parameters
     * @param {String} opts.groupBy [Ticket filter ID &#x3D;&gt; group_by] map
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    getTicketFiltersCountsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'group_by': opts['groupBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['KeyAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/ticket_filters_counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all filters counts
     * @param {Object} opts Optional parameters
     * @param {String} opts.groupBy [Ticket filter ID &#x3D;&gt; group_by] map
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    getTicketFiltersCounts(opts) {
      return this.getTicketFiltersCountsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
