/**
 * DeskPRO API
 * DeskPRO API
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DeskProApi);
  }
}(this, function(expect, DeskProApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DeskProApi.AppsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AppsApi', function() {
    describe('deleteAppProxyHttpByInstance', function() {
      it('should call deleteAppProxyHttpByInstance successfully', function(done) {
        //uncomment below and update the code to test deleteAppProxyHttpByInstance
        //instance.deleteAppProxyHttpByInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAppZapierHookById', function() {
      it('should call deleteAppZapierHookById successfully', function(done) {
        //uncomment below and update the code to test deleteAppZapierHookById
        //instance.deleteAppZapierHookById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppPackageById', function() {
      it('should call getAppPackageById successfully', function(done) {
        //uncomment below and update the code to test getAppPackageById
        //instance.getAppPackageById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppPackageCount', function() {
      it('should call getAppPackageCount successfully', function(done) {
        //uncomment below and update the code to test getAppPackageCount
        //instance.getAppPackageCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppPackages', function() {
      it('should call getAppPackages successfully', function(done) {
        //uncomment below and update the code to test getAppPackages
        //instance.getAppPackages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppProxyHttpByInstance', function() {
      it('should call getAppProxyHttpByInstance successfully', function(done) {
        //uncomment below and update the code to test getAppProxyHttpByInstance
        //instance.getAppProxyHttpByInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppZapierPing', function() {
      it('should call getAppZapierPing successfully', function(done) {
        //uncomment below and update the code to test getAppZapierPing
        //instance.getAppZapierPing(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApps', function() {
      it('should call getApps successfully', function(done) {
        //uncomment below and update the code to test getApps
        //instance.getApps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('headAppProxyHttpByInstance', function() {
      it('should call headAppProxyHttpByInstance successfully', function(done) {
        //uncomment below and update the code to test headAppProxyHttpByInstance
        //instance.headAppProxyHttpByInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('optionsAppProxyHttpByInstance', function() {
      it('should call optionsAppProxyHttpByInstance successfully', function(done) {
        //uncomment below and update the code to test optionsAppProxyHttpByInstance
        //instance.optionsAppProxyHttpByInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchAppProxyHttpByInstance', function() {
      it('should call patchAppProxyHttpByInstance successfully', function(done) {
        //uncomment below and update the code to test patchAppProxyHttpByInstance
        //instance.patchAppProxyHttpByInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setAppProxyHttpByInstance', function() {
      it('should call setAppProxyHttpByInstance successfully', function(done) {
        //uncomment below and update the code to test setAppProxyHttpByInstance
        //instance.setAppProxyHttpByInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAppProxyHttpByInstance', function() {
      it('should call updateAppProxyHttpByInstance successfully', function(done) {
        //uncomment below and update the code to test updateAppProxyHttpByInstance
        //instance.updateAppProxyHttpByInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
