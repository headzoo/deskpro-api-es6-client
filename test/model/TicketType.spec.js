/**
 * DeskPRO API
 * DeskPRO API
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DeskProApi);
  }
}(this, function(expect, DeskProApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DeskProApi.TicketType();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TicketType', function() {
    it('should create an instance of TicketType', function() {
      // uncomment below and update the code to test TicketType
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be.a(DeskProApi.TicketType);
    });

    it('should have the property subject (base name: "subject")', function() {
      // uncomment below and update the code to test the property subject
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

    it('should have the property department (base name: "department")', function() {
      // uncomment below and update the code to test the property department
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

    it('should have the property parent (base name: "parent")', function() {
      // uncomment below and update the code to test the property parent
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

    it('should have the property language (base name: "language")', function() {
      // uncomment below and update the code to test the property language
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

    it('should have the property priority (base name: "priority")', function() {
      // uncomment below and update the code to test the property priority
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

    it('should have the property workflow (base name: "workflow")', function() {
      // uncomment below and update the code to test the property workflow
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

    it('should have the property product (base name: "product")', function() {
      // uncomment below and update the code to test the property product
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

    it('should have the property person (base name: "person")', function() {
      // uncomment below and update the code to test the property person
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

    it('should have the property agent (base name: "agent")', function() {
      // uncomment below and update the code to test the property agent
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

    it('should have the property agentTeam (base name: "agent_team")', function() {
      // uncomment below and update the code to test the property agentTeam
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

    it('should have the property organization (base name: "organization")', function() {
      // uncomment below and update the code to test the property organization
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

    it('should have the property isHold (base name: "is_hold")', function() {
      // uncomment below and update the code to test the property isHold
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

    it('should have the property urgency (base name: "urgency")', function() {
      // uncomment below and update the code to test the property urgency
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

    it('should have the property cc (base name: "cc")', function() {
      // uncomment below and update the code to test the property cc
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

    it('should have the property fields (base name: "fields")', function() {
      // uncomment below and update the code to test the property fields
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

    it('should have the property star (base name: "star")', function() {
      // uncomment below and update the code to test the property star
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

    it('should have the property suppressUserNotify (base name: "suppress_user_notify")', function() {
      // uncomment below and update the code to test the property suppressUserNotify
      //var instane = new DeskProApi.TicketType();
      //expect(instance).to.be();
    });

  });

}));
